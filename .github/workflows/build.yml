name: Final Android APK Build (Manual SDK)

on:
  # Trigger the workflow on push events to the main branch
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # Use a stable Long-Term Support version of Ubuntu
    runs-on: ubuntu-22.04

    steps:
    # Step 1: Check out your repository code so the workflow can access it
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up the correct Java version (17) required by the latest SDK tools
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # Step 3: Set up Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    # Step 4: Install essential system-level dependencies for building Python packages
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip build-essential libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libffi-dev libssl-dev

    # Step 5: Manually download, set up the Android SDK, and accept licenses
    - name: Manually download and set up Android SDK
      run: |
        # Define SDK root path for clarity
        SDK_ROOT=$HOME/android-sdk

        # Create SDK directory
        mkdir -p $SDK_ROOT/cmdline-tools

        # Download and extract cmdline-tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip commandlinetools-linux-11076708_latest.zip -d $SDK_ROOT/cmdline-tools

        # The tools are extracted into a sub-folder, so move them to the expected path
        mv $SDK_ROOT/cmdline-tools/cmdline-tools $SDK_ROOT/cmdline-tools/latest

        # Set ANDROID_HOME environment variable for subsequent steps
        echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV

        # Accept all licenses, explicitly providing the sdk_root path
        yes | $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root=$SDK_ROOT

        # Install necessary platform and build tools, explicitly providing the sdk_root path
        $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-31" "build-tools;30.0.3" "platform-tools" --sdk_root=$SDK_ROOT

    # Step 6: Install all Python packages required by the project
    - name: Install Python packages
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip setuptools
        pip install "cython<3.0.0" kivy kivymd plyer firebase-admin bcrypt cryptography buildozer

    # Step 7: Run Buildozer to compile the APK
    - name: Run Buildozer
      run: |
        source venv/bin/activate
        buildozer -v android debug

    # Step 8: Upload the generated APK as a build artifact
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: eldercare-apk
        path: bin/*.apk
        if-no-files-found: error # This will make the job fail if no APK is found